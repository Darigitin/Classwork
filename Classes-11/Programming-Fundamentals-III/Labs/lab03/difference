6c6
< 
---
> template<class T>
10d9
<     typedef int data_t;
12c11
<     node(data_t d) { next = NULL; data = d; }
---
>     node(T d) { next = NULL; data = d; }
15c14
<     data_t data;
---
>     T data;
18c17
< 
---
> template<class T>
22c21
<     node *head;
---
>   node<T> *head;
33c32
<        node *tptr = head;
---
>        node<T> *tptr = head;
43c42
<     void add(int n, node::data_t d)
---
>     void add(int n, T d)
51c50
<           node *tptr = new node(d);
---
>           node<T> *tptr = new node<T>(d);
57,58c56,57
<          node *tptr = head;
< 	 node *tptr2 = new node(d);
---
>          node<T> *tptr = head;
> 	 node<T> *tptr2 = new node<T>(d);
70c69
<           node *tptr = head;
---
>           node<T> *tptr = head;
75c74
<           tptr->next = new node(d);
---
>           tptr->next = new node<T>(d);
78c77
<     void add_last(node::data_t d)
---
>     void add_last(T d)
83c82
<     void add_first(node::data_t d)
---
>     void add_first(T d)
88c87
<     node::data_t get(int n)
---
>     T get(int n)
90c89
<        node *tptr = head;
---
>        node<T> *tptr = head;
106c105
<     node::data_t get_first()
---
>     T get_first()
115c114
<     node::data_t get_last()
---
>     T get_last()
117c116
<        node *tptr = head;
---
>        node<T> *tptr = head;
139c138
<              node *tptr = head;
---
>              node<T> *tptr = head;
150,151c149,150
<           node *tptr = head;
<           n--;
---
>           node<T> *tptr = head;
> 	  n--;
157c156
<           node *tptr2 = tptr->next;
---
>           node<T> *tptr2 = tptr->next;
163c162
<           node *tptr = head;
---
>           node<T> *tptr = head;
187c186
<         node *tptr;
---
>         node<T> *tptr;
206,207c205,228
< 
< 
---
> template<class T>
> class stack
> {
>    linked_list<T> ll;
>    
>    public:
>  
>    void push(T d)
>    {
>       ll.add(0, d);
>    }
> 
>    T pop()
>    {
>      T d = top();
>      ll.remove(0);
>      return d; 
>    }
> 
>    T top()
>    {
>       ll.get_first();
>    }
> };
210c231,232
<     linked_list ll;
---
>     stack<double> s;
>     int n;
212c234
<     int i, d;
---
>     double d;
215c237
<         cin >> cmd >> i >> d;
---
>         cin >> cmd >> d;
217,218c239
<         cout << "MAIN: cmd = " << cmd << ", i = " << i
<              << ", d = " << d << endl;
---
>         cout << "MAIN: cmd = " << cmd << ", d = " << d << endl;
220,243c241,249
<         if (cmd == "add")
<             ll.add(i, d);
<         else if (cmd == "addf")
<             ll.add_first(d);
<         else if (cmd == "addl")
<             ll.add_last(d);
<         else if (cmd == "rem")
<             ll.remove(i);
<         else if (cmd == "remf")
<             ll.remove_first();
<         else if (cmd == "reml")
<             ll.remove_last();
<         else if (cmd == "get") {
<             d = ll.get(i);
<             cout << "get returns: " << d << endl;
<         } else if (cmd == "getf") {
<             d = ll.get_first();
<             cout << "getf returns: " << d << endl;
<         } else if (cmd == "getl") {
<             d = ll.get_last();
<             cout << "getl returns: " << d << endl;
<         } else if (cmd == "dump")
<             ll.dump();
<         else if (cmd == "quit")
---
>         if (cmd == "push")
>             s.push(d);
>         else if (cmd == "pop") {
>             d = s.pop();
>             cout << "MAIN: pop = " << d << endl;
>         } else if (cmd == "top") {     // returns the value from top of stack,
>             d = s.top();        // but DOES NOT REMOVE the item.
>             cout << "MAIN: top = " << d << endl;
>         } else if (cmd == "quit")
246a253
> 
