vertefeuille
===========================================================================
NOTE:

To find my comments in this file, which contains both your
program and its output, search for the string "MCU".

Your grade is at the bottom of this file.
===========================================================================

lab9.cpp SOURCE: ============================
#include <iostream>
#include <cstdlib>

using namespace std;
template<class T>
class node
{
  public:

    node(T d) { next = NULL; data = d; prev = NULL; }

    node *next, *prev;
    T data;
};

template<class T>
class linked_list
{
  private:
  node<T> *head, *tail, *user;

  public:

    linked_list()
    {
        head = NULL;
        tail = NULL;
        user = NULL;
    }

    int size()
    {
       node<T> *tptr = head;
       int c = 0;
       while (tptr)
       {
          tptr = tptr->next;
	  c++;
       }
       return c;
    }

    void add(int n, T d)
    {
       if (n>size())
       {
          cout << -1 << endl;
       }
       else if (n == 0 && head == NULL)
       {
          node<T> *tptr = new node<T>(d);
          head = tptr;
          tail = head;
          user = head;
       }
       else if (n == 0)
       {
          node<T> *tptr = new node<T>(d);
          tptr->next = head;
          head->prev = tptr;
          head = tptr;
          
       }
       else if (n < size())
       {
         node<T> *tptr = head;
	 node<T> *tptr2 = new node<T>(d);
         n--;
	 for (int c = 0; c<n && tptr->next != NULL; c++)
	 {
	    tptr = tptr->next;
	 }
	 tptr2->next = tptr->next;
	 tptr->next = tptr2;
         tptr2->next->prev = tptr2;
	 tptr2->prev = tptr;
       }
       else 
       {
          node<T> *tptr = head;
          while (tptr->next)
          {
             tptr = tptr->next;
          }
          tptr->next = new node<T>(d);
	  tptr->next->prev = tptr;
	  tail = tptr->next;
       }
    }
    void add_last(T d)
    {
       add(size(), d);
    }

    void add_first(T d)
    {
       add(0, d);
    }

    T get(int n)
    {
       node<T> *tptr = head;
       if (n >= size() || head == NULL)
       {
          return -1;
       }
       else 
       {  
          for (int c = 0; c<n && tptr->next != NULL; c++)
          {
             tptr = tptr->next;
          }
          return tptr->data;
       }
    }


    T get_first()
    {
       if (head != NULL)
       {
          return head->data;
       }
       return -1;
    }

    T get_last()
    {
       node<T> *tptr = head;
       if (head != NULL)
       {
          while (tptr->next)
          {
             tptr = tptr->next;
          }
          return tptr->data;
       }
       return -1;
    }

    void remove(int n)
    {
       if (n > size() || head == NULL)
       {
          cout << -1 << endl;
       }
       else if(n == 0 || size() == 1)
       {
          if (head->next)
	  {
             node<T> *tptr = head;
             head = head->next;
	     if (user == tptr)
	     {
	        adv_ptr();
	     }
	     delete head->prev;

	  }
          else 
          {
             delete head;
             head = NULL;
	     tail = NULL;
	     user = NULL;
          }
       }
       else if (n < size())
       {
          node<T> *tptr = head;
	  n = n - 2;

	  for (int c = 0; c<n && tptr->next != NULL; c++)
	  {
             tptr = tptr->next;
	  }
          node<T> *tptr2 = tptr->next;
          tptr->next = tptr2->next;
          node<T> *tptr3 = tptr2->next;
	  tptr3->prev = tptr2->prev;
	  if (tail == tptr2)
	  {
	     tail = tptr;
	  }
	  if (user == tptr2)
	  {
	     adv_ptr();
	  }
          delete tptr2;
       }
       else 
       {
          node<T> *tptr = head;
          n = n - 2;;
          for (int c = 0; c<n && tptr->next != NULL; c++)
          {
	     tptr = tptr->next;
          }
	  if (user == tptr->next)
	  {
	     rew_ptr();
	  }
	  delete tptr->next;
          tptr->next = NULL;
	  tail = tptr;
       } 
  
    }

    void remove_first()
    {
       remove(0);
    }

    void remove_last()
    {
       remove(size());
    }

    void dump()
       {
        node<T> *tptr, *tptr2;

        cout << "    DUMP: (size = " << size() << ", first = " << get_first() << ", last = " << get_last() << ")\n";

        if (head == NULL) {
            cout << "    DUMP: head = NULL    tail = NULL\n\n";
            return;
        }

        tptr = head;
        tptr2 = tail;

        cout << "    DUMP:   head = : " << tptr->data << "    tail = : " << tptr2->data << endl;
        while (tptr->next != NULL) {
            tptr = tptr->next;
            tptr2 = tptr2->prev;
        cout << "    DUMP:   data = : " << tptr->data << "    data = : " << tptr2->data << endl;
        }
        cout << endl;
      }
      void reset_ptr()
      {
         user = head;
      }

      void adv_ptr()
      {
         if (head == NULL || user->next == NULL)
         {
            error();
         }
	 else
	 {
            user = user->next;
	 }
      }

      void rew_ptr()
      {
         if (head == NULL || user->prev == NULL)
	 {
	    error();
	 }
	 else
	 {
            user = user->prev;
	 }
      }

      T getup()
      {
         if (head)
         {
            return user->data;
         }
         return -1;
      }
      void error()
      {
         cout << "-1" << endl;
      }
};


class quicksort
{
   private:
   public:

   quicksort(int a[], int l)
   {
      linked_list<int> ll;
      for (int i = 0; i < l; i++)
      {
         ll.add(i, a[i]);
      }
      cout << "QUICKSORT CONSTRUCTOR: before sort, ll =" << endl;
      ll.dump();

      rquicksort(ll);
      for (int i = 0; i < l; i++)
      {
         a[i] = ll.get(i);
      }
   }
   void rquicksort(linked_list<int>& ll)
   {
      cout << "rquicksort: TOP: ll = " << endl;
      ll.dump();
      int pivot = ll.get_last();
      cout << "rquicksort: pivot = " << pivot << endl;
      linked_list<int> lm;
      linked_list<int> ln;
      while (ll.get_first() != -1)
      {
         if (ll.get_first() < pivot)
	 {
	    lm.add_last(ll.get_first());
	    ll.remove_first();
	 }
	 else if (ll.get_first() > pivot)
	 {
	    ln.add_last(ll.get_first());
	    ll.remove_first();
	 }
	 else if (ll.get_first() == pivot)
	 {
	    ll.remove_first();
	 }

      }
      cout << "rquicksort: lm = " << endl;
      lm.dump();
      cout << "rquicksort: ln = " << endl;
      ln.dump();

      if (lm.get_first() != lm.get_last())
      {  
         cout << "calling recursively with lm..." << endl;
         rquicksort(lm);
      }
      if (ln.get_first() != ln.get_last())
      {
         cout << "calling recurisvely with ln..." << endl;
         rquicksort(ln);
      }
      cout << "rquicksort: after recursive calls, concatenating...!" << endl;
      while (lm.get_first() != -1)
      {
         cout << "adding " << lm.get_first() << " from lm" << endl;
         ll.add_last(lm.get_first());
	 lm.remove_first();
      }
      ll.add_last(pivot);
      cout << "adding " << pivot << " from pivot" << endl;
      while (ln.get_first() != -1)
      {
         cout << "adding " << ln.get_first() << " from ln" << endl;
         ll.add_last(ln.get_first());
	 ln.remove_first();
      }
      cout << "rquicksort: done concatenating, ll =" << endl;
      ll.dump();
      
   }
};

int main(void)
{
    int ar[100];

    int i, v, len;

    for (i=0; i<100; i++) {
        cout << "enter a number (-1 to quit): ";
        cin >> v;

        if (v < 0) break;

        ar[i] = v;
    }

    len = i;

    cout << "main:  before sort:\n";
    for (i=0; i<len; i++) {
        cout << "main:  ar[" << i << "] = " << ar[i] << endl;
    }

    quicksort qs(ar, len);

    cout << "main:  after sort:\n";
    for (i=0; i<len; i++) {
        cout << "main:  ar[" << i << "] = " << ar[i] << endl;
    }
}

OUTPUT: =====================================
enter a number (-1 to quit): enter a number (-1 to quit): enter a number (-1 to quit): enter a number (-1 to quit): enter a number (-1 to quit): enter a number (-1 to quit): enter a number (-1 to quit): enter a number (-1 to quit): enter a number (-1 to quit): enter a number (-1 to quit): main:  before sort:
main:  ar[0] = 6
main:  ar[1] = 3
main:  ar[2] = 7
main:  ar[3] = 5
main:  ar[4] = 2
main:  ar[5] = 9
main:  ar[6] = 1
main:  ar[7] = 8
main:  ar[8] = 4
QUICKSORT CONSTRUCTOR: before sort, ll =
    DUMP: (size = 9, first = 6, last = 4)
    DUMP:   head = : 6    tail = : 4
    DUMP:   data = : 3    data = : 8
    DUMP:   data = : 7    data = : 1
    DUMP:   data = : 5    data = : 9
    DUMP:   data = : 2    data = : 2
    DUMP:   data = : 9    data = : 5
    DUMP:   data = : 1    data = : 7
    DUMP:   data = : 8    data = : 3
    DUMP:   data = : 4    data = : 6

rquicksort: TOP: ll = 
    DUMP: (size = 9, first = 6, last = 4)
    DUMP:   head = : 6    tail = : 4
    DUMP:   data = : 3    data = : 8
    DUMP:   data = : 7    data = : 1
    DUMP:   data = : 5    data = : 9
    DUMP:   data = : 2    data = : 2
    DUMP:   data = : 9    data = : 5
    DUMP:   data = : 1    data = : 7
    DUMP:   data = : 8    data = : 3
    DUMP:   data = : 4    data = : 6

rquicksort: pivot = 4
rquicksort: lm = 
    DUMP: (size = 3, first = 3, last = 1)
    DUMP:   head = : 3    tail = : 1
    DUMP:   data = : 2    data = : 2
    DUMP:   data = : 1    data = : 3

rquicksort: ln = 
    DUMP: (size = 5, first = 6, last = 8)
    DUMP:   head = : 6    tail = : 8
    DUMP:   data = : 7    data = : 9
    DUMP:   data = : 5    data = : 5
    DUMP:   data = : 9    data = : 7
    DUMP:   data = : 8    data = : 6

calling recursively with lm...
rquicksort: TOP: ll = 
    DUMP: (size = 3, first = 3, last = 1)
    DUMP:   head = : 3    tail = : 1
    DUMP:   data = : 2    data = : 2
    DUMP:   data = : 1    data = : 3

rquicksort: pivot = 1
rquicksort: lm = 
    DUMP: (size = 0, first = -1, last = -1)
    DUMP: head = NULL    tail = NULL

rquicksort: ln = 
    DUMP: (size = 2, first = 3, last = 2)
    DUMP:   head = : 3    tail = : 2
    DUMP:   data = : 2    data = : 3

calling recurisvely with ln...
rquicksort: TOP: ll = 
    DUMP: (size = 2, first = 3, last = 2)
    DUMP:   head = : 3    tail = : 2
    DUMP:   data = : 2    data = : 3

rquicksort: pivot = 2
rquicksort: lm = 
    DUMP: (size = 0, first = -1, last = -1)
    DUMP: head = NULL    tail = NULL

rquicksort: ln = 
    DUMP: (size = 1, first = 3, last = 3)
    DUMP:   head = : 3    tail = : 3

rquicksort: after recursive calls, concatenating...!
adding 2 from pivot
adding 3 from ln
rquicksort: done concatenating, ll =
    DUMP: (size = 2, first = 2, last = 3)
    DUMP:   head = : 2    tail = : 3
    DUMP:   data = : 3    data = : 2

rquicksort: after recursive calls, concatenating...!
adding 1 from pivot
adding 2 from ln
adding 3 from ln
rquicksort: done concatenating, ll =
    DUMP: (size = 3, first = 1, last = 3)
    DUMP:   head = : 1    tail = : 3
    DUMP:   data = : 2    data = : 2
    DUMP:   data = : 3    data = : 1

calling recurisvely with ln...
rquicksort: TOP: ll = 
    DUMP: (size = 5, first = 6, last = 8)
    DUMP:   head = : 6    tail = : 8
    DUMP:   data = : 7    data = : 9
    DUMP:   data = : 5    data = : 5
    DUMP:   data = : 9    data = : 7
    DUMP:   data = : 8    data = : 6

rquicksort: pivot = 8
rquicksort: lm = 
    DUMP: (size = 3, first = 6, last = 5)
    DUMP:   head = : 6    tail = : 5
    DUMP:   data = : 7    data = : 7
    DUMP:   data = : 5    data = : 6

rquicksort: ln = 
    DUMP: (size = 1, first = 9, last = 9)
    DUMP:   head = : 9    tail = : 9

calling recursively with lm...
rquicksort: TOP: ll = 
    DUMP: (size = 3, first = 6, last = 5)
    DUMP:   head = : 6    tail = : 5
    DUMP:   data = : 7    data = : 7
    DUMP:   data = : 5    data = : 6

rquicksort: pivot = 5
rquicksort: lm = 
    DUMP: (size = 0, first = -1, last = -1)
    DUMP: head = NULL    tail = NULL

rquicksort: ln = 
    DUMP: (size = 2, first = 6, last = 7)
    DUMP:   head = : 6    tail = : 7
    DUMP:   data = : 7    data = : 6

calling recurisvely with ln...
rquicksort: TOP: ll = 
    DUMP: (size = 2, first = 6, last = 7)
    DUMP:   head = : 6    tail = : 7
    DUMP:   data = : 7    data = : 6

rquicksort: pivot = 7
rquicksort: lm = 
    DUMP: (size = 1, first = 6, last = 6)
    DUMP:   head = : 6    tail = : 6

rquicksort: ln = 
    DUMP: (size = 0, first = -1, last = -1)
    DUMP: head = NULL    tail = NULL

rquicksort: after recursive calls, concatenating...!
adding 6 from lm
adding 7 from pivot
rquicksort: done concatenating, ll =
    DUMP: (size = 2, first = 6, last = 7)
    DUMP:   head = : 6    tail = : 7
    DUMP:   data = : 7    data = : 6

rquicksort: after recursive calls, concatenating...!
adding 5 from pivot
adding 6 from ln
adding 7 from ln
rquicksort: done concatenating, ll =
    DUMP: (size = 3, first = 5, last = 7)
    DUMP:   head = : 5    tail = : 7
    DUMP:   data = : 6    data = : 6
    DUMP:   data = : 7    data = : 5

rquicksort: after recursive calls, concatenating...!
adding 5 from lm
adding 6 from lm
adding 7 from lm
adding 8 from pivot
adding 9 from ln
rquicksort: done concatenating, ll =
    DUMP: (size = 5, first = 5, last = 9)
    DUMP:   head = : 5    tail = : 9
    DUMP:   data = : 6    data = : 8
    DUMP:   data = : 7    data = : 7
    DUMP:   data = : 8    data = : 6
    DUMP:   data = : 9    data = : 5

rquicksort: after recursive calls, concatenating...!
adding 1 from lm
adding 2 from lm
adding 3 from lm
adding 4 from pivot
adding 5 from ln
adding 6 from ln
adding 7 from ln
adding 8 from ln
adding 9 from ln
rquicksort: done concatenating, ll =
    DUMP: (size = 9, first = 1, last = 9)
    DUMP:   head = : 1    tail = : 9
    DUMP:   data = : 2    data = : 8
    DUMP:   data = : 3    data = : 7
    DUMP:   data = : 4    data = : 6
    DUMP:   data = : 5    data = : 5
    DUMP:   data = : 6    data = : 4
    DUMP:   data = : 7    data = : 3
    DUMP:   data = : 8    data = : 2
    DUMP:   data = : 9    data = : 1

main:  after sort:
main:  ar[0] = 1
main:  ar[1] = 2
main:  ar[2] = 3
main:  ar[3] = 4
main:  ar[4] = 5
main:  ar[5] = 6
main:  ar[6] = 7
main:  ar[7] = 8
main:  ar[8] = 9
DUE DATE: Dec 2 7:00AM   ================================================
total 128
drwxrwxr-x.  2 vertefeuille vertefeuille  4096 Dec  2 10:54 .
drwxrwx---. 13 vertefeuille vertefeuille  4096 Nov 22 11:28 ..
-rwxrwxr-x.  1 vertefeuille vertefeuille 32620 Nov 23 15:26 a.out
-rw-rw-r--.  1 vertefeuille vertefeuille    13 Nov 23 15:21 data
-rw-rw-r--.  1 vertefeuille vertefeuille  5003 Nov 22 11:39 lab4.cpp
-rw-rw-r--.  1 vertefeuille vertefeuille  2064 Nov 22 11:39 lab4.o
-rwxrwxr-x.  1 vertefeuille vertefeuille 14839 Nov 23 15:48 lab9
-rw-rw-r--.  1 vertefeuille vertefeuille  7469 Nov 23 15:48 lab9.cpp
-rw-rw-r--.  1 vertefeuille vertefeuille 27101 Nov 22 12:35 out
-rw-rw-r--.  1 vertefeuille vertefeuille    52 Nov 29 10:44 pizza
-rw-r--r--.  1 root         root         14252 Dec  2 10:54 README.MCU
===========================================================================
    *****    All students are required to read and understand   *****
    *****    the Attendance, Homework, and Late Work Policies   *****
    *****    which can be found at http://cs.actx.edu/~usnick   *****
===========================================================================
Instructor Comments:

Great job Matt-

Grade:  100
