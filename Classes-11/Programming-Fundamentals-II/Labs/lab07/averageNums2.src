#########################################################################
# HALT  = 0;  stop program
# ADD   = 1;  GPREG is updated with itself + MEMORY[arg]
# SUB   = 2;  GPREG is updated with itself - MEMORY[arg]
# MLT   = 3;  GPREG is updated with itself * MEMORY[arg]
# DIV   = 4;  GPREG is updated with itself / MEMORY[arg]
# ILOAD = 5;  arg to GPREG
# LOAD  = 6;  MEMORY[arg] to GPREG
# STOR  = 7;  GPREG to MEMORY[arg]
# READ  = 8;  keyboard to MEMORY[arg]
# WRITE = 9;  MEMORY[arg] to screen
# BR    = 10; unconditional branch to instruction at MEMORY[arg]
# BZ    = 11; branch if GPREG is zero
# BN    = 12; branch if GPREG is nonzero
# DUMP  = 13; dump memory/register contents
#########################################################################

# MEMORY[70] = Location of usr inputed number
# MEMORY[71] = Location of the sum of the user inputed numbers
# MEMORY[72] = Location of the number of user inputed numbers
# MEMORY[73] = Location of the average of the user inputed numbers

READ 70  # Ask the user for a number and store it in MEMORY[70]
LOAD 70  # Load the value of MEMORY[70] to the GPREG
BZ 13    # Branch to instruction number 13 (HALT99) if the GPREG is a 0
ADD 71   # Add the value of MEMORY[71] to the GPREG
STOR 71  # Store the GPREG to MEMORY[71]
ILOAD 1  # Load a 1 to the GPREG
ADD 72   # Add the value of MEMORY[72] to the GPREG
STOR 72  # Store the GPREG to MEMORY[72]
LOAD 71  # Load the value of MEMORY[71] to the GPREG
DIV 72   # Divide the GPREG by the value MEMORY[72]
STOR 73  # Store the GPREG to MEMORY[73]
WRITE 73 # Display the average to the user
BR 0     # Branch back to instruction 0
HALT 99  # Stop the program

