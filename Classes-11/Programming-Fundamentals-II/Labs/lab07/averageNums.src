#########################################################################
# HALT  = 0;  stop program
# ADD   = 1;  GPREG is updated with itself + MEMORY[arg]
# SUB   = 2;  GPREG is updated with itself - MEMORY[arg]
# MLT   = 3;  GPREG is updated with itself * MEMORY[arg]
# DIV   = 4;  GPREG is updated with itself / MEMORY[arg]
# ILOAD = 5;  arg to GPREG
# LOAD  = 6;  MEMORY[arg] to GPREG
# STOR  = 7;  GPREG to MEMORY[arg]
# READ  = 8;  keyboard to MEMORY[arg]
# WRITE = 9;  MEMORY[arg] to screen
# BR    = 10; unconditional branch to instruction at MEMORY[arg]
# BZ    = 11; branch if GPREG is zero
# BN    = 12; branch if GPREG is nonzero
# DUMP  = 13; dump memory/register contents
#########################################################################

# MEMORY[70] = Location of usr inputed number
# MEMORY[71] = Location of the sum of the user inputed numbers
# MEMORY[72] = Location of the number of user inputed numbers
# MEMORY[73] = Location of the average of the user inputed numbers

READ 70  # Asking the user for input and then storing it in the GPREG
LOAD 70

ADD 71   # Taking the user input and adding it to previous and then storing 
STOR 71  # it in MEMORY[71]

LOAD 70  # Testing to see if the user inputed number is a zero, and if it is
BZ 10    # branching outside of the loop

ILOAD 1  # Adding 1 to the counter of inputed numbers and storing it in
ADD 72   # MEMORY[72]
STOR 72 

BR 0     # Continuing the loop till the user enters a zero

LOAD 71  # Checking to see if the sum is zero and if so branching to the end
BZ 16    # of the program

LOAD 71  # Finding the average of the inputed numbers after the user has 
DIV 72   # inputed a zero and if the sum is not a zero. Then displaying the
STOR 73  # average to the user.
WRITE 73 

HALT 99  # Stop the program

